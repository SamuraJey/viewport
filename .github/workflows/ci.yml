name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-backend-image:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false

  python-tests:
    name: Python Tests (with coverage >= 80%)
    runs-on: ubuntu-latest
    needs: build-backend-image
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: viewport_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=5s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install uv
        run: pip install 'uv==0.8.1'
      - name: Sync dependencies
        run: uv sync
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/viewport_test
          POSTGRES_HOST: localhost
          POSTGRES_DB: viewport_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          JWT_SECRET_KEY: supersecretkey
        run: |
          uv run pytest --cov=src --cov-report=xml --cov-report=term-missing
      - name: Enforce coverage >= 80%
        run: |
          total=$(python - <<'PY'
          import sys,xml.etree.ElementTree as ET
          tree=ET.parse('coverage.xml'); root=tree.getroot()
          totals=root.find('coverage').attrib if root.tag=='coverage' else root.attrib
          lines_covered=int(totals.get('lines-covered') or totals.get('lines_covered') or 0)
          lines_valid=int(totals.get('lines-valid') or totals.get('lines_valid') or 1)
          pct=100.0*lines_covered/lines_valid
          print(f"Coverage: {pct:.2f}%")
          sys.exit(0 if pct>=80.0 else 1)
          PY
          )
          echo "$total"

  frontend-build-and-tests:
    name: Frontend Build and Tests (allowed to fail)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      - name: Install deps
        working-directory: frontend
        run: npm ci
      - name: Typecheck and build
        working-directory: frontend
        run: npm run build
      - name: Run unit tests (vitest)
        working-directory: frontend
        run: npm run test:run -- --reporter=dot
